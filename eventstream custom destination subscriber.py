# Kafka subscriber example from Microsoft Fabric Custom Destination 
# (generated by Copilot from the provided code snippet)

# This code is intended to be run in a Python environment with the confluent_kafka library installed.
# To load the module, run: 
# python.exe -m pip install --upgrade pip
# pip install confluent_kafka

from confluent_kafka import Consumer, KafkaException, KafkaError


connection_string = ""
event_hub_name = ""
consumer_group_name = ""

def get_properties():
    namespace = connection_string.split("//")[1].split(".")[0]
    props = {
        'bootstrap.servers': f"{namespace}.servicebus.windows.net:9093",
        'security.protocol': 'SASL_SSL',
        'sasl.mechanism': 'PLAIN',
        'group.id': consumer_group_name,
        'sasl.username': "$ConnectionString",
        'sasl.password': connection_string,
        'auto.offset.reset': 'earliest'
    }
    return props

def consume_events(consumer):
    try:
        consumer.subscribe([event_hub_name])
        while True:
            msg = consumer.poll(1.0)  # Poll for messages
            if msg is None:
                continue
            if msg.error():
                if msg.error().code() == KafkaError._PARTITION_EOF:
                    # End of partition event
                    print(f"Reached end of partition: {msg.topic()} [{msg.partition()}] at offset {msg.offset()}")
                elif msg.error():
                    raise KafkaException(msg.error())
            else:
                # Proper message
                print(f"Consumer Record: ({msg.key()}, {msg.value()}, {msg.partition()}, {msg.offset()})")
                consumer.commit(asynchronous=True)
    except KeyboardInterrupt:
        print("Consumer interrupted")
    finally:
        consumer.close()

def main():
    props = get_properties()
    consumer = Consumer(props)
    consume_events(consumer)

if __name__ == "__main__":
    main()